/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  findMasterEditionPda,
  findMetadataPda,
} from '@metaplex-foundation/mpl-token-metadata';
import { findAssociatedTokenPda } from '@metaplex-foundation/mpl-toolbox';
import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findMintAuthorityPda } from '../../hooked';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';
import {
  MetadataArgs,
  MetadataArgsArgs,
  getMetadataArgsSerializer,
} from '../types';

// Accounts.
export type DecompressV1InstructionAccounts = {
  voucher: PublicKey | Pda;
  leafOwner: Signer;
  tokenAccount?: PublicKey | Pda;
  mint: PublicKey | Pda;
  mintAuthority?: PublicKey | Pda;
  metadataAccount?: PublicKey | Pda;
  masterEdition?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  sysvarRent?: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram?: PublicKey | Pda;
  logWrapper?: PublicKey | Pda;
};

// Data.
export type DecompressV1InstructionData = {
  discriminator: Array<number>;
  metadata: MetadataArgs;
};

export type DecompressV1InstructionDataArgs = { metadata: MetadataArgsArgs };

export function getDecompressV1InstructionDataSerializer(): Serializer<
  DecompressV1InstructionDataArgs,
  DecompressV1InstructionData
> {
  return mapSerializer<
    DecompressV1InstructionDataArgs,
    any,
    DecompressV1InstructionData
  >(
    struct<DecompressV1InstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['metadata', getMetadataArgsSerializer()],
      ],
      { description: 'DecompressV1InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [54, 85, 76, 70, 228, 250, 164, 81],
    })
  ) as Serializer<DecompressV1InstructionDataArgs, DecompressV1InstructionData>;
}

// Args.
export type DecompressV1InstructionArgs = DecompressV1InstructionDataArgs;

// Instruction.
export function decompressV1(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: DecompressV1InstructionAccounts & DecompressV1InstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplBubblegum',
    'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    voucher: { index: 0, isWritable: true, value: input.voucher ?? null },
    leafOwner: { index: 1, isWritable: true, value: input.leafOwner ?? null },
    tokenAccount: {
      index: 2,
      isWritable: true,
      value: input.tokenAccount ?? null,
    },
    mint: { index: 3, isWritable: true, value: input.mint ?? null },
    mintAuthority: {
      index: 4,
      isWritable: true,
      value: input.mintAuthority ?? null,
    },
    metadataAccount: {
      index: 5,
      isWritable: true,
      value: input.metadataAccount ?? null,
    },
    masterEdition: {
      index: 6,
      isWritable: true,
      value: input.masterEdition ?? null,
    },
    systemProgram: {
      index: 7,
      isWritable: false,
      value: input.systemProgram ?? null,
    },
    sysvarRent: {
      index: 8,
      isWritable: false,
      value: input.sysvarRent ?? null,
    },
    tokenMetadataProgram: {
      index: 9,
      isWritable: false,
      value: input.tokenMetadataProgram ?? null,
    },
    tokenProgram: {
      index: 10,
      isWritable: false,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 11,
      isWritable: false,
      value: input.associatedTokenProgram ?? null,
    },
    logWrapper: {
      index: 12,
      isWritable: false,
      value: input.logWrapper ?? null,
    },
  };

  // Arguments.
  const resolvedArgs: DecompressV1InstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.tokenAccount.value) {
    resolvedAccounts.tokenAccount.value = findAssociatedTokenPda(context, {
      mint: expectPublicKey(resolvedAccounts.mint.value),
      owner: expectPublicKey(resolvedAccounts.leafOwner.value),
    });
  }
  if (!resolvedAccounts.mintAuthority.value) {
    resolvedAccounts.mintAuthority.value = findMintAuthorityPda(context, {
      mint: expectPublicKey(resolvedAccounts.mint.value),
    });
  }
  if (!resolvedAccounts.metadataAccount.value) {
    resolvedAccounts.metadataAccount.value = findMetadataPda(context, {
      mint: expectPublicKey(resolvedAccounts.mint.value),
    });
  }
  if (!resolvedAccounts.masterEdition.value) {
    resolvedAccounts.masterEdition.value = findMasterEditionPda(context, {
      mint: expectPublicKey(resolvedAccounts.mint.value),
    });
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.sysvarRent.value) {
    resolvedAccounts.sysvarRent.value = publicKey(
      'SysvarRent111111111111111111111111111111111'
    );
  }
  if (!resolvedAccounts.tokenMetadataProgram.value) {
    resolvedAccounts.tokenMetadataProgram.value = context.programs.getPublicKey(
      'mplTokenMetadata',
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    );
    resolvedAccounts.tokenMetadataProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value =
      context.programs.getPublicKey(
        'splAssociatedToken',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      );
    resolvedAccounts.associatedTokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.logWrapper.value) {
    resolvedAccounts.logWrapper.value = context.programs.getPublicKey(
      'splNoop',
      'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'
    );
    resolvedAccounts.logWrapper.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getDecompressV1InstructionDataSerializer().serialize(
    resolvedArgs as DecompressV1InstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
