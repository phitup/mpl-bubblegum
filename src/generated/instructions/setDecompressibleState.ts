/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  DecompressibleState,
  DecompressibleStateArgs,
  getDecompressibleStateSerializer,
} from '../types';

// Accounts.
export type SetDecompressibleStateInstructionAccounts = {
  treeConfig: PublicKey | Pda;
  treeCreator?: Signer;
};

// Data.
export type SetDecompressibleStateInstructionData = {
  discriminator: Array<number>;
  decompressableState: DecompressibleState;
};

export type SetDecompressibleStateInstructionDataArgs = {
  decompressableState: DecompressibleStateArgs;
};

export function getSetDecompressibleStateInstructionDataSerializer(): Serializer<
  SetDecompressibleStateInstructionDataArgs,
  SetDecompressibleStateInstructionData
> {
  return mapSerializer<
    SetDecompressibleStateInstructionDataArgs,
    any,
    SetDecompressibleStateInstructionData
  >(
    struct<SetDecompressibleStateInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['decompressableState', getDecompressibleStateSerializer()],
      ],
      { description: 'SetDecompressibleStateInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [82, 104, 152, 6, 149, 111, 100, 13],
    })
  ) as Serializer<
    SetDecompressibleStateInstructionDataArgs,
    SetDecompressibleStateInstructionData
  >;
}

// Args.
export type SetDecompressibleStateInstructionArgs =
  SetDecompressibleStateInstructionDataArgs;

// Instruction.
export function setDecompressibleState(
  context: Pick<Context, 'identity' | 'programs'>,
  input: SetDecompressibleStateInstructionAccounts &
    SetDecompressibleStateInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplBubblegum',
    'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    treeConfig: { index: 0, isWritable: true, value: input.treeConfig ?? null },
    treeCreator: {
      index: 1,
      isWritable: false,
      value: input.treeCreator ?? null,
    },
  };

  // Arguments.
  const resolvedArgs: SetDecompressibleStateInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.treeCreator.value) {
    resolvedAccounts.treeCreator.value = context.identity;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSetDecompressibleStateInstructionDataSerializer().serialize(
    resolvedArgs as SetDecompressibleStateInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
